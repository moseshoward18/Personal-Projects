import random 
import math


class Board:
    def __init__(self,old_board,score = 0,direction = "null",new = True,parent = "null"):
        self.parent = parent
        self.board = old_board
        self.score = score
        if direction == "left" or direction == "a":
            self.left()
        elif direction == "right" or direction == "d":
            self.right()
        elif direction == "up" or direction == "w":
            self.up()
        elif direction == "down" or direction == "s":
            self.down()
        self.getZeros()
        if self.zeros!= [] and (direction!="null" or new):
            self.newNum()
                    
    def left(self):
        for x in range(4):
            stop = 0
            for y in range(1,4):
                if self.board[x][y]!= 0:
                    m = y-1
                    while m >= stop:
                        if self.board[x][m] == 0:
                            self.board[x][m] = self.board[x][y]
                            self.board[x][y] = 0
                        elif self.board[x][m] == self.board[x][y]:
                            self.score+=self.board[x][y]*2
                            self.board[x][m]*=2
                            self.board[x][y] = 0
                            stop= y
                            m-=1
                            break
                        y=m
                        m-=1
    def right(self):
        for x in range(4):
            stop = 3
            for y in range(2,-1,-1):
                if self.board[x][y]!= 0:
                    m = y+1
                    while m <= stop:
                        if self.board[x][m] == 0:
                            self.board[x][m] = self.board[x][y]
                            self.board[x][y] = 0
                        elif self.board[x][m] == self.board[x][y]:
                            self.score+=self.board[x][y]*2
                            self.board[x][m]*=2
                            self.board[x][y] = 0
                            stop = y
                            m+=1
                            break
                        y=m
                        m+=1
                
    def up(self):
        for y in range(4):
            stop = 0
            for x in range(1,4):
                if self.board[x][y]!= 0:
                    m = x-1
                    while m >= stop:
                        if self.board[m][y] == 0:
                            self.board[m][y] = self.board[x][y]
                            self.board[x][y] = 0
                        elif self.board[m][y] == self.board[x][y]:
                            self.score+=self.board[x][y]*2
                            self.board[m][y]*=2
                            self.board[x][y] = 0
                            stop=x
                            m-=1
                            break
                        x=m
                        m-=1


    def down(self):
        for y in range(4):
            stop = 3
            for x in range(2,-1,-1):
                if self.board[x][y]!= 0:
                    m = x+1
                    while m <= stop:
                        if self.board[m][y] == 0:
                            self.board[m][y] = self.board[x][y]
                            self.board[x][y] = 0
                        elif self.board[m][y] == self.board[x][y]:
                            self.score+=self.board[x][y]*2
                            self.board[m][y]*=2
                            self.board[x][y] = 0
                            stop=x
                            m+=1
                            break
                        x=m
                        m+=1

    
    def newNum(self):
        coord = random.choice(self.zeros)
        self.board[coord[0]][coord[1]] = 4 if random.random() >= .9 else 2
            
    def __str__(self):
        return ['\n'.join([''.join(['{:5}'.format(item) for item in row]) 
      for row in self.board])]
            
    def lose(self):
        if self.zeros == []:
            if self.board == self.copy("up").board and \
            self.board == self.copy("down").board and \
            self.board == self.copy("left").board and \
            self.board == self.copy("right").board:
                return True
        return False
            
    def getZeros(self):
        self.zeros = []
        for x in range(4):
            for y in range(4):
                if self.board[x][y]==0:
                    self.zeros.append([x,y])
    
    def copy(self,direction = "null",new = True):
        return Board([[elem for elem in row] for row in self.board],self.score,direction)
    
def orderBreak(board):
    value = 1
    firstRow = board.board[0]
    secondRow = board.board[1]
    if max(firstRow) == firstRow[0]:
        value += 1000
        if firstRow[1] > firstRow[2] and firstRow[1] > firstRow[3]:
            value += .3
            if firstRow[2] > firstRow[3]:
                value += .1
    if min(firstRow)>=max(secondRow):
        if max(secondRow) == secondRow[3]:
            value += .3
            if secondRow[2] > secondRow[1] and secondRow[2] > secondRow[0]:
                value+=.1
                if secondRow[1] <secondRow[0]:
                    value += .05
    return value

def heuristic(board,score):
    return (board.score - score)*orderBreak(board)
    
def logScore(board):
    total = sum([sum(row) for row in board.board])
    score = 0
    for row in board.board:
        for elem in row:                
            p = elem/total
            if p!= 0:
                score += p*math.log2(p)
    return 5/-score

def getSpaces(board):
    newSpaces = []
    for i in range(len(board.zeros)):
        newX = board.zeros[i][0]
        newY = board.zeros[i][1]
        new = board.copy()
        new.board[newX][newY] = 2
        newSpaces.append([.9,new])
        new = board.copy()
        new.board[newX][newY] = 4
        newSpaces.append([.1,new])
    return newSpaces
        
            
        
def getChoices(board):
    choices = ["up","left","right"]
    if min(board.board[0]) > max(board.board[1]) and not(board.board[0][0]==board.board[0][1] or board.board[0][1]==board.board[0][2] or board.board[0][2]==board.board[0][3]):
        if "left" in choices:
            if board.board[1].count(0) > 0:
                choices.remove("left")
            elif board.board[1][0]==board.board[1][1] or board.board[1][1]==board.board[1][2] or board.board[1][2]==board.board[1][3]:
                choices.remove("left")
        if "right" in choices:
            if 0 in board.board[1]:
                for row in board.board:
                    if row[board.board[1].index(0)] != 0:
                        choices.remove("right")
                        return [choice for choice in choices if board.copy(choice).board != board.board]
        
    else:
        if "right" in choices:
            if 0 in board.board[0]:
                choices.remove("right")
            elif board.board[0][0]==board.board[0][1] or board.board[0][1]==board.board[0][2] or board.board[0][2]==board.board[0][3]:
                choices.remove("right")
        if "left" in choices:
            if 0 in board.board[0]:
                for row in board.board:
                    if row[board.board[0].index(0)] != 0:
                        choices.remove("left")
                        return [choice for choice in choices if board.copy(choice).board != board.board]
                    
    return [choice for choice in choices if board.copy(choice).board != board.board]
    
def AI(board,score, depth = 0):            
    if depth == 4:
        return heuristic(board,score)
    choices = getChoices(board)
    moves = []
    for choice in choices:
        moves.append([AI(board.copy(choice),score,depth+1),choice])
        moves.append([AI(board.copy(choice),score,depth+1),choice])
        moves.append([AI(board.copy(choice),score,depth+1),choice])
        moves.append([AI(board.copy(choice),score,depth+1),choice])
    if depth != 0:
        if len(moves)> 0:
            return sum([move[0] for move in moves])/len(moves)
        return -1000
    if choices == []:
        if min([board.board[0][0],board.board[1][0],board.board[2][0],board.board[3][0]])> 0 and board.copy("down").board != board.board:
            return "down"
        if board.copy("right").board != board.board:
            return "right"
        elif board.copy("down").board != board.board:
            return "down"
        else:
            return "stop"
    return max(moves,key = lambda x: x[0])[1]


def game():    
    f = open("C:\\Users\\moses\\Desktop\\gamePrint.txt", "a")
    board = Board([[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]])
    board.newNum()
    #board.print()
    score = 100
    move = 0
    while True:
        #print(board.score)
        direction = AI(board,board.score) #random.choice(["up","down","left","right"])
        if direction == "stop" or board.lose():
            break
        board = board.copy(direction)
        if board.score > score:
            print(score)
            score += 100
        move+=1
        #if move < 100:
        f.write(str(direction)+" "+str(move)+ " "+ str(board.score) + '\n')
        for row in board.board:
            f.write(str(str(row[0])+"\t"+str(row[1])+"\t"+str(row[2])+"\t"+str(row[3])+"\n"))
        f.write("\n")
    f.write("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
    f.close()
    return board.score
        
    
                    
def main():
    games = 1
    total = 0
    f = open("C:\\Users\\moses\\Desktop\\gamePrint.txt", "w")
    f.close()
        
    for g in range(games):
        score = game()
        total+=score
        print("game",g+1,score)
    print("average",total/games)
    f.close()
        
        
    
main()
