from math import sqrt
def showGauss(A):
  #A = matrix, R = row, n = number in row R
  for R in range(1,len(A)): #for each row in A, starting with second row
    for n in range(R): #for each number in row
      s = A[R][n]/A[n][n] #scalar is row's number / R[n] ex(R2,x2) 
      print('R',R+1,'=R',R+1,'-R',n+1,'*(',round(s,2),')',sep='')
      print('R',R+1,'=(',sep='',end='')
      for i in range(len(A[R])): #subtract rows
        if(i == len(A[R])-1):
          print('(', round(A[R][i],2),'-',round(A[n][i]*s,2),')',sep='')
        elif (i == len(A[R])-2):
          print('(',round(A[R][i],2),'-',round(A[n][i]*s,2),')','x',i+1,' = ',sep='',end = '')
        else:
          print('(',round(A[R][i],2),'-',round(A[n][i]*s,2),')','x',i+1,' + ',sep='',end = '')
        A[R][i] = A[R][i] - A[n][i] * s
      print('R',R+1,'=',sep='',end='')
      for i in range(len(A[R])):
        if(i == len(A[R])-1):
          print(round(A[R][i],2),end='\n\n')
        elif (i == len(A[R])-2):
          print(round(A[R][i],2),'x',i+1,' = ',sep='',end='')
        else:
          print(round(A[R][i],2),'x',i+1,' + ',sep='',end='')
  values = [1]*(len(A[R])-1) #initialize list of each final value as 1
  print('solve for x',len(A[-1])-1,'\n',round(A[-1][-2],2),'x',len(A[-1])-1,' = ',A[-1][-1],sep='')
  print('(',round(A[-1][-2],2),'x',len(A[-1])-1,' = ',A[-1][-1],')/',round(A[-1][-2],2),sep='')
  print('x',len(A[-1])-1,' = ',(A[-1][-1]/A[-1][-2]),sep='',end="\n\n")
  for R in range(len(A)-1,-1,-1):
    sumR = 0
    if R == len(A)-1:
      values[R] = (A[R][len(A[R])-1]-sumR)/A[R][R]
    else:
      print('Solve for x',R+1,':',sep = '')
      for i in range(len(A[R])-1):
        A[R][i]*=values[i]
      for n in range(1+R,len(A[R])-1):
        sumR+=A[R][n]
      for n in range(R,len(A[R])-1):
        if n == R:
          print(round(A[R][n],2),'x',n+1,sep='',end='')
        elif n == len(A[R])-2:
          print(' +',round(A[R][n],2),'=',A[R][n+1])
        else:
          print(' +',round(A[R][n],2),end='')
      print('(',round(A[R][R],2),'x',R+1,' = ',round(A[R][-1]-sumR,2),')/',round(A[R][R],2),sep='')
      values[R] = (A[R][-1]-sumR)/A[R][R]
      print('x',R+1,' = ',values[R],sep='',end="\n\n")
  for i,value in enumerate(values):
    print("\n\nx",i+1,"=",round(value,2),sep='',end=",  ")

def gauss(A):
  #A = matrix, R = row, n = number in row R
  for R in range(1,len(A)): #for each row in A, starting with second row
    for n in range(R): #for each number in row
      s = A[R][n]/A[n][n] #scalar is row's number / R[n] ex(R2,x2) 
      for i in range(len(A[R])): #subtract rows
        A[R][i] = A[R][i] - A[n][i] * s
  values = [1]*(len(A[R])-1) #initialize list of each final value as 1
  
  for R in range(len(A)-1,-1,-1): #for the number of rows in A, starting with the last one
    sumR = 0  #resets at the end of every row
    for i in range(len(A[R])-1): #for each element in row starting with the first
      A[R][i]*=values[i] #multiply that element by the corresponding x1,x2,...,xn value
    for n in range(1+R,len(A[R])-1,1): #for each element in row starting with the last x value
      sumR+=A[R][n] #add to row sum
    values[R] = (A[R][len(A[R])-1]-sumR)/A[R][R] #new value is equal to the solved equation
  for i,value in enumerate(values): #print final values of x1,x2....
    print("x",i+1,"=",value,sep='',end=",  ")

def sumX(A,B):
  C = []
  for row in range(len(A)):
    Crow = []
    for scalar in range(len(A[0])):
      Crow.append(A[row][scalar] + B[row][scalar])
    C.append(Crow)
  return C

def showSumX(A,B):
  C = []
  for row in range(len(A)):
    Crow = []
    for scalar in range(len(A[0])):
      Crow.append(A[row][scalar] + B[row][scalar])
      print(A[row][scalar],"+",B[row][scalar],"=",Crow[-1], end="     ")
    C.append(Crow)
    print("")
  return C

def difX(A,B):
  C = []
  for row in range(len(A)):
    Crow = []
    for scalar in range(len(A[0])):
      Crow.append(A[row][scalar] - B[row][scalar])
    C.append(Crow)
  return C

def showDifX(A,B):
  C = []
  for row in range(len(A)):
    Crow = []
    for scalar in range(len(A[0])):
      Crow.append(A[row][scalar] - B[row][scalar])
      print(A[row][scalar],"+",B[row][scalar],"=",Crow[-1], end="     ")
    C.append(Crow)
    print("")

def transpose(A):
    return [[A[j][i] for j in range(len(A))] for i in range(len(A[0]))] 
  
def determinant(A):
  if len(A) == 2:
    return A[0][0]*A[1][1]-A[0][1]*A[1][0]
  total=0
  for elem in range(len(A[0])):
    tempMatrix = []
    for i in range(1, len(A)):
      tempRow = []
      for j in range(len(A)):
        if j != elem:
          tempRow.append(A[i][j])
      tempMatrix.append(tempRow)
    total+=((-1)**(elem))*A[0][elem]*determinant(tempMatrix)
  return total

def adjoint(A):
  C=[]
  for i in range(len(A)):
    n = []
    for j in range(len(A[0])):
      n.append(0)
    C.append(n)
      
  for ROW in range(len(A)):
    for ELEM in range(len(A[0])):
      tempMatrix = []
      for row in range(len(A)):
        if row != ROW:
          tempRow = []
          for elem in range(len(A[0])):
            if elem != ELEM:
              tempRow.append(A[row][elem])
          tempMatrix.append(tempRow)
      C[ROW][ELEM] = ((-1)**(ELEM+ROW))*determinant(tempMatrix)
  return C

def inverse(A):
  return scalar(transpose(adjoint(A)),(1/determinant(A)))

def shape(A,B):
  if len(A[0]) == len(B):
    return len(A), len(B[0])
  else:
    print("matrixes do not match")
    return 0,0


def showShapeX(A):
  print(len(A),"X",len(A[0]))
  
def scalar(A,x):
  for row in range(len(A)):
    for value in range(len(A[0])):
      A[row][value] *= x
  return A

def productX(A,B):
  C = []
  H, W = shape(A,B)
  for h in range(H):
    Crow = []
    for w in range(W):
      temp = 0
      for i in range(len(A[0])):
        temp += A[h][i]*B[i][w]
      Crow.append(temp)
    C.append(Crow)
  return C
  
def showProductX(A,B):
  C = []
  if len(A[0]) != len(B):
    if len(A) == len(B[0]):
      A,B=B,A
    else:
      print("matrixes do not match")
      return
  H,W = len(A), len(B[0])
  for h in range(H):
    Crow = []
    for w in range(W):
      temp = 0
      for i in range(len(A[0])):
        temp += A[h][i]*B[i][w]
        print(A[h][i],"*",B[i][w],end = " ")
        if i == len(A[0])-1:
          print("=", temp, end = "      ")
        else:
          print("+",end= " ")
      Crow.append(temp)
    C.append(Crow)
    print("")
  return C

def regression(A,Y):
  return productX(inverse(productX(transpose(A),A)),productX(transpose(A),Y))

def printX(X):
  for row in X:
    for i in row:
      print(i,end=" ")
    print("")

def power(A,X):
  lam = []
  for count in range(20):
    common = sqrt(sum(productX(transpose(X),X)[0]))
    u = list(map(lambda x: [x[0]/common],X))
    X = productX(A,u)
    lam.append(productX(transpose(u),X))
  return lam

"""
def gauss(A)
def showGauss(A)
def sumX(A,B)
def showSumX(A,B)
def difX(A,B)
def showDifX(A,B)
def shape(A,B)
def showShapeX(A)
def productX(A,B)
def showProductX(A,B)
def printX(X)
def determinant(A)
def transpose(A)
def inverse(A)
def regression(A,Y)
def scalar(A,x)
def adjoint(A)
def power(A,X)
"""


def rec(A,B,x):
  if x == 1:
    return productX(A,B)
  return productX(A,rec(A,B,x-1))

def new(A,B):
    return [[sum([A[h][i]*B[i][w] for i in range(len(A[0]))]) for w in range(len(B[0]))] for h in range(len(A))]
  

def main():


  print(gauss([[4757, 3, 1,28542700], [3001, 2, 2,17406800], [3491, 2, 2,20946700]]))

main()

"""
A = [[1,.75,.5625],[1,2,4],[1,3,9],[1,4,16],[1,6,36],[1,8,64],[1,8.5,72.25]]
B = [[1.2],[1.95],[2],[2.4],[2.4],[2.7],[2.6]]

A = [[4,7],[1,2],[5,6]]
B = [[3,0,1],[1,7,3]]

A = [[3,1],[8,6],[0,4]]
B = [[5,9],[7,2]]

B = [[1],[2],[3]]
A = [[1,1,1],[2,2,2],[3,3,3]]

A = [[1,2],[3,4]]
B = [[1,2],[3,4]]

"""
