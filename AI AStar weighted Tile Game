# -*- coding: utf-8 -*-
"""
Created on Tue Feb 19 19:06:39 2019

@author: moses
"""

import heapq
stack = []
used = {}
tieBreaker = 0

class Node:
  def swap(self,board,a,b):
    temp = board[a]
    board[a] = board[b]
    board[b] = temp
    return board

  def __init__(self,board,depth,parent):
    self.me = self
    self.parent = parent
    self.depth = depth
    self.hScore = 0
    self.board = board
    if parent == "alpha":
      self.initialize()
  
  def childMaker(self,newChild):
      if str(newChild) not in used:
          child = Node(newChild,self.depth+1,self.me)
          #child.misplaced()
          child.manhattan()
          global tieBreaker
          heapq.heappush(stack,(child.hScore,tieBreaker,child))
          tieBreaker += 1


  def misplaced(self):
    for i in self.board:
        if i != self.board[i]:
            self.hScore += 1
    self.hScore+=self.depth
    
  def manhattan(self):
      for y in range(3):
          for x in range(3):
              pos = self.board.index(x+3*y)
              self.hScore += abs(pos%3-x) + abs(pos//3-y)
      self.hScore+=self.depth
              
  def initialize(self):
    board = self.board
    empty = board.index(0)
    if empty > 2:
      self.childMaker(self.swap(board[:],empty,empty-3))
    if empty < 6:
      self.childMaker(self.swap(board[:],empty,empty+3))
    if empty%3!=0:
      self.childMaker(self.swap(board[:],empty,empty-1))
    if (empty-2)%3!=0:
      self.childMaker(self.swap(board[:],empty,empty+1))

  def getBoard(self):
      return self.board
  def getParent(self):
      return self.parent
  
def getTrail(p):
    if p.parent == "alpha":
        return [p.board]
    return [p.board]+ getTrail(p.parent)
    

def AStar(board):
  num = 0
  Node(board,0,"alpha")
  while(True):
    leaf = heapq.heappop(stack)[2]
    if leaf.board == [0,1,2,3,4,5,6,7,8]:
      return getTrail(leaf)
    used[str(leaf.board)] = leaf.board
    if leaf.depth < 40:
        leaf.initialize()
    num+=1
    print(num, len(stack))
  
def print_result(result):
    for board in reversed(result):
        print(board[0],board[1],board[2])
        print(board[3],board[4],board[5])
        print(board[6],board[7],board[8])
        print("To")


lst = AStar([8, 7, 5, 4, 1, 2, 3, 0, 6])
print("done in",len(lst))
print_result(lst)
